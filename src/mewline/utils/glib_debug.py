import os
import traceback

from loguru import logger


def setup_glib_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ GLib —Å –±—ç–∫—Ç—Ä–µ–π—Å–∞–º–∏."""
    try:
        import gi

        gi.require_version("GLib", "2.0")
        from gi.repository import GLib

        def detailed_log_handler(log_domain, log_level, message, _user_data):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."""
            # –ü–æ–ª—É—á–∞–µ–º stack trace Python
            stack = traceback.format_stack()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            level_map = {
                GLib.LogLevelFlags.LEVEL_ERROR: "ERROR",
                GLib.LogLevelFlags.LEVEL_CRITICAL: "CRITICAL",
                GLib.LogLevelFlags.LEVEL_WARNING: "WARNING",
                GLib.LogLevelFlags.LEVEL_MESSAGE: "MESSAGE",
                GLib.LogLevelFlags.LEVEL_INFO: "INFO",
                GLib.LogLevelFlags.LEVEL_DEBUG: "DEBUG",
            }

            level_name = level_map.get(log_level, f"LEVEL_{log_level}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            detailed_msg = f"""
üêõ GLIB {level_name} in {log_domain or "Unknown"}:
üìù Message: {message}
üîç Process: {os.getpid()}
üìö Python Stack (last 5 calls):
{"".join(stack[-5:])}
==========================================
"""

            # –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à logger
            if log_level & (
                GLib.LogLevelFlags.LEVEL_ERROR | GLib.LogLevelFlags.LEVEL_CRITICAL
            ):
                logger.error(detailed_msg)
            elif log_level & GLib.LogLevelFlags.LEVEL_WARNING:
                logger.warning(detailed_msg)
            else:
                logger.info(detailed_msg)

            # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ stderr –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            print(detailed_msg, flush=True)

            return True  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
        GLib.log_set_default_handler(detailed_log_handler, None)

        # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
        domains = ["Gtk", "Gdk", "GLib", "GObject", "Gio", "Pango", "cairo", "fabric"]
        for domain in domains:
            try:
                GLib.log_set_handler(
                    domain,
                    GLib.LogLevelFlags.LEVEL_MASK
                    | GLib.LogLevelFlags.FLAG_FATAL
                    | GLib.LogLevelFlags.FLAG_RECURSION,
                    detailed_log_handler,
                    None,
                )
            except Exception as e:
                logger.debug(f"Could not set handler for domain {domain}: {e}")

        logger.info("üîß Enhanced GLib logging with stack traces enabled")
        return True

    except Exception as e:
        logger.error(f"Failed to setup GLib enhanced logging: {e}")
        return False


def setup_gobject_debug():
    """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ª–∞–¥–∫—É GObject —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —É—Ç–µ—á–µ–∫ –æ–±—ä–µ–∫—Ç–æ–≤."""
    try:
        import gi

        gi.require_version("GObject", "2.0")
        from gi.repository import GObject

        # –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—ä–µ–∫—Ç–æ–≤
        if hasattr(GObject, "BindingFlags"):
            # –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏
            logger.info("üîç GObject extended debugging available")

        logger.info("üîß GObject debugging setup complete")
        return True

    except Exception as e:
        logger.error(f"Failed to setup GObject debugging: {e}")
        return False


def enable_all_glib_debug():
    """–í–∫–ª—é—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö GLib –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    debug_vars = {
        "G_DEBUG": "fatal-warnings,fatal-criticals,gc-friendly,resident-modules,bind-now-flags",
        "G_SLICE": "debug-blocks,always-malloc",
        "G_MESSAGES_DEBUG": "all",
        "GOBJECT_DEBUG": "objects,signals,instance-count",
    }

    for key, value in debug_vars.items():
        os.environ[key] = value

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    success_glib = setup_glib_logging()
    success_gobject = setup_gobject_debug()

    if success_glib and success_gobject:
        logger.info("‚úÖ All GLib debug features enabled successfully")
        return True
    else:
        logger.warning("‚ö†Ô∏è Some GLib debug features failed to enable")
        return False
